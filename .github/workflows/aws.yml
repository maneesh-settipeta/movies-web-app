name: Deploy to Amazon ECS

on:
  push:
    branches: ["main"]

env:
  AWS_REGION: us-east-1
  ECS_SERVICE: BookMyShow-Service
  ECS_CLUSTER: bookMyShowCluster
  ECS_TASK_DEFINITION: ./aws/task-definition.json
  CONTAINER_NAME: bookmyshow-container-image

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build, tag, and push image to Docker Hub
        id: build-image
        env:
          IMAGE_NAME: ${{ secrets.DOCKER_HUB_USERNAME }}/bookmyshow
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $IMAGE_NAME:$IMAGE_TAG .
          docker push $IMAGE_NAME:$IMAGE_TAG
          echo "image=$IMAGE_NAME:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Stop current running ECS task
        run: |
          echo "Fetching running ECS task..."
          TASK_ARN=$(aws ecs list-tasks \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service-name ${{ env.ECS_SERVICE }} \
            --desired-status RUNNING \
            --query "taskArns[0]" \
            --output text)

          if [ "$TASK_ARN" != "None" ] && [ -n "$TASK_ARN" ]; then
            echo "Stopping ECS task: $TASK_ARN"
            aws ecs stop-task \
              --cluster ${{ env.ECS_CLUSTER }} \
              --task $TASK_ARN \
              --reason "Stopping previous task before deploying new one"
          else
            echo "No running ECS task found."
          fi

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

      - name: Send success email notification
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.EMAIL_HOST }} # e.g., smtp.gmail.com
          server_port: ${{ secrets.EMAIL_PORT }} # e.g., 465 or 587
          username: ${{ secrets.EMAIL_USERNAME }} # Full email address
          password: ${{ secrets.EMAIL_PASSWORD }} # App password or real password (use App Password for Gmail)
          subject: "âœ… BookMyShow Deployment Successful"
          body: |
            Hello Team,

            ðŸŽ‰ The ECS deployment of BookMyShow was successful.

            âœ… Docker image updated  
            âœ… ECS task started and stable  
            âœ… Service running correctly

            Best regards,  
            GitHub Actions
          to: ${{ secrets.EMAIL_TO }} # Comma-separated emails
          from: ${{ secrets.EMAIL_USERNAME }} # Must match the sending email
          secure: false
